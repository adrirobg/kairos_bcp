[project]
name = "kairos-bcp"
version = "0.1"
description = "" # SUGERENCIA: Añade una breve descripción aquí, ej: "Backend para el Sistema de Gestión de Conocimiento Personal Kairos."
authors = [
    {name = "adrirobg",email = "adrirobles1991@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic (>=2.11.5,<3.0.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "python-dotenv (>=1.1.0,<2.0.0)",
    "sqlalchemy (>=2.0.41,<3.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "alembic (>=1.16.1,<2.0.0)",
    "pgvector (>=0.4.1,<0.5.0)",
    "google-genai (>=1.16.1,<2.0.0)",
    "google-generativeai (>=0.8.5,<0.9.0)",
    "fastapi (>=0.115.12,<0.116.0)",
    "uvicorn (>=0.34.2,<0.35.0)",
    "agno==1.5.1"
] # Aquí irán las dependencias de tu aplicación, ej: fastapi, sqlalchemy, pydantic, etc.


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"] # Esto está bien, aunque las versiones más recientes de Poetry suelen poner solo "poetry-core" o "poetry-core>=1.0.0". Lo que tienes es funcional.
build-backend = "poetry.core.masonry.api"
[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
ruff = "^0.11.11"
mypy = "^1.15.0"
pre-commit = "^4.2.0"

[tool.black]
line-length = 88
target-version = ['py313'] # Asegura compatibilidad con tu versión de Python

[tool.ruff]
# Establece la longitud de línea para que coincida con Black
line-length = 88
# Habilita el fix automático para reglas que lo soporten
fix = true
# Excluye directorios comunes (como entornos virtuales)
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations/versions", # A menudo los archivos autogenerados de Alembic no necesitan tanto linting
]

[tool.ruff.lint]
# Selecciona un conjunto de reglas. Ejemplos:
# E, F: Errores de pycodestyle y Pyflakes
# W: Advertencias de pycodestyle
# I: isort (ordenamiento de imports)
# UP: pyupgrade
# B: flake8-bugbear (posibles bugs)
# C4: flake8-comprehensions (comprensiones más idiomáticas)
# SIM: flake8-simplify (simplificaciones de código)
# ARG: flake8-unused-arguments (argumentos no usados)
# T20: flake8-print (evitar prints en producción)
select = ["E", "F", "W", "I", "UP", "B", "C4", "SIM", "ARG", "T20"]
ignore = [] # Puedes añadir códigos de error específicos para ignorar aquí

[tool.ruff.format]
# Opcional: Ruff también puede formatear, pero si usas Black, puedes deshabilitarlo
# o asegurarte de que su configuración sea compatible.
# Si usas Black como formateador principal, no necesitas esta sección
# o puedes configurarla para que no entre en conflicto.

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Inicialmente útil, puedes hacerlo más estricto después
disallow_untyped_defs = true  # Fomenta la anotación de tipos en todas las funciones/métodos
exclude = ["migrations/versions/"] # Excluye los archivos de versiones de Alembic

# --- Fin Configuración de Herramientas ---
